function [Bin Data]=CompileATPTitrationResults()% This function was written specifically for processing HIP ATP titration% data. It loads several MAT files with processed Velocity data and% compiles Velocity Histograms.%% USE: Bin = HIP_CompileVelocityHistogram()%% Gheorghe Chistol, 18 Aug 2010%% Ask for the ParametersPrompt = {'Hist Lower Limit (bp/sec)','Hist Upper Lim (bp/sec)',...          'Hist Bin Width (bp/sec)','Length of Packaged DNA(bp)','DNA Length Bin Start (bp)',...          'DNA Length Bin End (bp)','DNA Length Bin Width (bp)'};Title = 'Enter the Following Parameters';Lines = 1;Default = {'-100','50','2','21000','10000','21000','1000'};Options.Resize='on'; Options.WindowStyle='normal'; Options.Interpreter='tex';Answer = inputdlg(Prompt, Title, Lines, Default, Options);%Hist parameters refer to the histogram display at the endHistLowerLim = str2num(Answer{1});HistUpperLim = str2num(Answer{2});HistBinWidth = str2num(Answer{3});LengthDNA    = str2num(Answer{4}); %the length of packaged DNABinStart     = str2num(Answer{5});BinEnd       = str2num(Answer{6});BinWidth     = str2num(Answer{7});%% Declare Global Variables for Folder NamesATPFolder='D:\Phi29\2010_ANALYSIS\ATP_Titration_HIP\';ATP=[10 15 25 50 100 250 500 1000];%ATP=[10 15 25 50 75 100 250 500 1000];temp = BinStart:BinWidth:BinEnd; %make the bins for binning velocity data based on the length of DNA packagedBin.Start        = temp(1:end-1); %starting of each binBin.End          = temp(2:end);   %ending of each binfor a=1:length(ATP);    Data{a}.ATP=ATP(a); %atp concentration    for b=1:length(Bin.Start)        Data{a}.Velocity{b}=[];        Data{a}.PackagedDNA{b}=0;    endendfor a=1:length(ATP) %a stands for ATP concetration index    CurrentFolder=[ATPFolder num2str(ATP(a)) 'uM'];    disp(['Working in the ' CurrentFolder ' folder']);    temp=what(CurrentFolder); %get the list of all the files    CurrentFile = temp.mat; %look only at the mat files    for f=1:length(CurrentFile)        load([CurrentFolder '\' CurrentFile{f}]);        disp(['Loaded File: ' CurrentFile{f}]);        Vel.Location=LengthDNA-Vel.Location; %convert to the packaged DNA length        L=length(Bin.Start);        for b=1:L %index b stands for Bin            Ind = 1:length(Vel.Location); %the index of all data points from this file            KeepFromBelow = Vel.Location<Bin.End(b);            KeepFromAbove = Vel.Location>Bin.Start(b);            Keep          = KeepFromAbove.*KeepFromBelow;            Remove        = ~Keep;            Ind(Remove) = [];            if ~isempty(Ind)                Data{a}.Velocity{b}(end+1) = mean(Vel.Velocity(Ind));                Data{a}.PackagedDNA{b} = Data{a}.PackagedDNA{b}+sum(Vel.Segment(Ind));            end        end    endend