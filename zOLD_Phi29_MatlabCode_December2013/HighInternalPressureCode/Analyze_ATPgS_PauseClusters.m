function Cluster=Analyze_ATPgS_PauseClusters()% Load a Results file with StepSize and DwellTime that corresponds to ATP-gamma-S % Then look at the dwell duration correlations. Based on ATP only packaging% data 99% of all dwells at 25uM ATP (6kb DNA) is below 0.5sec.%% USE: Cluster=Analyze_ATPgS_PauseClusters()%% Gheorghe Chistol, 25 Jan 2011%% Ask for the ParametersPrompt = {'Dwell Time Histogram Bin Size [sec]',...          'Step Size Histogram Bin Size [bp]',...          'Shortest GammaS Dwell [sec]',...          'Largest GammaS Dwell Separation [bp]', ...          'Max Small Step (for merging) [bp]',...          'Max Allowed Burst (for merging) [bp]',...          'Max Allowed Dwell Between GammaS Dwells [sec]'};Title = 'Enter the Following Parameters';Lines = 1;Default = {'0.02','0.5','.5','13','7','13','0.5'};Options.Resize='on'; Options.WindowStyle='normal'; Options.Interpreter='tex';Answer = inputdlg(Prompt, Title, Lines, Default, Options);%Hist parameters refer to the histogram display at the endDwellTimeBinSize             = str2num(Answer{1});StepSizeBinSize              = str2num(Answer{2});ShortestGammaSDwell          = str2num(Answer{3});LargestGammaSDwellSeparation = str2num(Answer{4});MaxSmallStep                 = str2num(Answer{5});MaxAllowedBurst              = str2num(Answer{6});MaxAllowedDwellBetween       = str2num(Answer{7});%% Global Variables and select the folder where Step/Dwell Data is storedglobal analysisPath;if isempty(analysisPath)   disp('analysisPath not defined. Use "SetAnalysisPath" to define it'); return;end%DataPath = uigetdir(analysisPath,'Please Select the Folder where Step Data is Stored'); [DataFile DataPath] = uigetfile([ [analysisPath filesep ] '*.mat'], 'Please select a Results file','MultiSelect', 'off');Cluster.Duration         = [];Cluster.Span             = [];Cluster.PackagedLength   = 0;Cluster.DwellTime        = [];Cluster.StepSize         = [];Cluster.RevisedStepSize  = [];Cluster.RevisedDwellTime = [];load([DataPath filesep DataFile]); %data is stored in the data structure FinalDwellsdisp(['Loaded File ' DataFile]);%FinalDwells{FileIndex}{FeedbackCycleIndex}for p=1:length(FinalDwells) %p is the file/phage index   for fc=1:length(FinalDwells{p}) %fc is the feedback cycle index       if ~isempty(FinalDwells{p}{fc}) %make sure it's not empty, sometimes it happens          temp = GammaS_ClusterAnalysisFunction(FinalDwells,p,fc,ShortestGammaSDwell,LargestGammaSDwellSeparation); %Lmin=12bp, Tmin=0.5sec, 30uM ATP conditions%         tempCluster.Duration = ClusterDuration;%         tempCluster.Span     = ClusterSpan;%         tempCluster.Dwells   = ClusterDwells;%         tempCluster.Steps    = ClusterSteps;%         tempCluster.StartTime = ClusterStartTime;%         tempCluster.StartLocation = ClusterStartLocation;          Cluster.Duration        = [Cluster.Duration temp.Duration];          Cluster.PackagedLength  = Cluster.PackagedLength+range(FinalDwells{p}{fc}.DwellLocation);          Cluster.Span            = [Cluster.Span temp.Span];          for k=1:length(temp.Dwells)               Cluster.DwellTime   = [Cluster.DwellTime temp.Dwells{k}];               Cluster.StepSize    = [Cluster.StepSize  temp.Steps{k}];                              tempRevisedStepSize  = temp.Steps{k};               tempRevisedDwellTime = temp.Dwells{k};               %now go through the step size from the current feedback cycle               %and merge consecutive short steps               s=1;               while s<length(tempRevisedStepSize)                   if s+1<=length(tempRevisedStepSize)                       %there is at least one follow-up step, so we can check                       %if we can merge it with the current step                       Step1=tempRevisedStepSize(s);                       Step2=tempRevisedStepSize(s+1);                       if max([Step1 Step2])<MaxSmallStep && Step1+Step2<MaxAllowedBurst && tempRevisedDwellTime(s+1)<MaxAllowedDwellBetween                           %each individual step is small enough and their sum                           %is not larger than the max allowed burst, also, the                           %dwell between them is not too long                           %go ahead and merge                           disp([num2str([Step1 tempRevisedDwellTime(s+1) Step2])]);                           tempRevisedStepSize(s)    = Step1+Step2;                           tempRevisedDwellTime(s)   = tempRevisedDwellTime(s)+tempRevisedDwellTime(s+1); %merge the two dwells too                           tempRevisedStepSize(s+1)  = []; %remove the next step, it was merged with the current step                           tempRevisedDwellTime(s+1) = []; %remove the dwell that used to be in between the two steps                           s=s+1; %move to the following step;                       else                           s=s+1; %can't merge, go on to the next step                       end                   else                       s=s+1; %move on                   end               end               Cluster.RevisedStepSize    = [Cluster.RevisedStepSize  tempRevisedStepSize];               Cluster.RevisedDwellTime   = [Cluster.RevisedDwellTime tempRevisedDwellTime];          end       end   endend%% Plot the ResultsRevisedStepSize = Cluster.RevisedStepSize;StepSize        = Cluster.StepSize;close all; figure; hold on;HistBins=min([RevisedStepSize StepSize])-StepSizeBinSize:StepSizeBinSize:max([RevisedStepSize StepSize])+StepSizeBinSize;subplot(2,1,1)hist(StepSize,HistBins);legend('Step Sizes','Location','NW');ylabel('Counts');title('GammaS Cluster Step Sizes')subplot(2,1,2)hist(RevisedStepSize,HistBins);legend('Merged Step Sizes','Location','NW');ylabel('Counts');xlabel('Step Size (bp)');close gcf;