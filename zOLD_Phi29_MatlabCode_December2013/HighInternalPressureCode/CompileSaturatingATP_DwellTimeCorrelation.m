function Results=CompileSaturatingATP_DwellTimeCorrelation()% Load stepping data for saturating ATP conditions and look at % PreviousDwellDutation vs CurrentDwellDuration to look for any correlations%% Data has be organized in folders like this:%% 15kb% 17kb% 21kb% etc, denoting the tether length used%% USE: Results=CompileSaturatingATP_DwellTimeCorrelation()%% Gheorghe Chistol, 19 Jan 2011%% Ask for the ParametersPrompt = {'Dwell Time Histogram Bin Size (sec)','Min Capsid Filling (bp)',...          'Max Capsid Filling (bp)','Capsid Filling Increment (bp)'};Title = 'Enter the Following Parameters';Lines = 1;Default = {'0.1','15000','20000','500'};Options.Resize='on'; Options.WindowStyle='normal'; Options.Interpreter='tex';Answer = inputdlg(Prompt, Title, Lines, Default, Options);%Hist parameters refer to the histogram display at the endDwellTimeBinSize = str2num(Answer{1});MinCapsidFilling = str2num(Answer{2});MaxCapsidFilling = str2num(Answer{3});FillingBinSize   = str2num(Answer{4}); %the length of packaged DNA%% Global Variables and select the folder where Step/Dwell Data is storedglobal analysisPath;if isempty(analysisPath)   disp('analysisPath not defined. Use "SetAnalysisPath" to define it');   return;endDataPath = uigetdir(analysisPath,'Please Select the Folder where Step Data is Stored'); temp = MinCapsidFilling:FillingBinSize:MaxCapsidFilling; %make the bins for binning velocity data based on the length of DNA packagedFillingBinStart  = temp(1:end-1); %starting of each binFillingBinFinish = temp(2:end);   %ending of each bin%% Get the names of all items in the DataPath, focus on the folders onlyDataPathContent = dir(DataPath);SubstrateLength = []; %the list of all DNA substrates being consideredSubstratePath   = {}; %the list of all folders in which data is storedfor i=1:length(DataPathContent)    if DataPathContent(i).isdir && length(DataPathContent(i).name)>2         %needs to be a folder and have a name longer than 2 characters, for        %example 3kb or 15kb, etc        if strcmp(DataPathContent(i).name(end-1:end),'kb')            %this folder name ends in kb, therefore is what we need            %check that the firt part of the folder name is an actual number            temp=str2num(DataPathContent(i).name(1:end-2));            if temp>0 && temp<25                SubstrateLength(end+1) = temp; %in kb                SubstratePath{end+1}   = DataPathContent(i).name; %name of the folder            end        end    endend%% Now that we know what we have, proceed to load the data and sort itFilling   = []; %the list of Filling(s) corresponding to the list of DwellTime(s)PrevDwell  = [];CurrDwell  = [];for Substrate=1:length(SubstratePath)    %see how many *.mat files there are in each folder    temp=what([DataPath '\' SubstratePath{Substrate} '\'],'mat');    MatFileList=temp.mat; %the list of all mat files;    if ~isempty(MatFileList) %if there are any files found        for MatFile=1:length(MatFileList)            MatFilePath=[DataPath '\' SubstratePath{Substrate} '\' MatFileList{MatFile}];            load(MatFilePath); %data is stored in the data structure FinalDwells            disp(['Loaded File ' MatFilePath]);            %FinalDwells{FileIndex}{FeedbackCycleIndex}            for FileIndex=1:length(FinalDwells)               for FeedbackCycleIndex=1:length(FinalDwells{FileIndex})                   if ~isempty(FinalDwells{FileIndex}{FeedbackCycleIndex}) %make sure it's not empty, sometimes it happens                       Filling   = [Filling   SubstrateLength(Substrate)*1000-FinalDwells{FileIndex}{FeedbackCycleIndex}.DwellLocation(2:end)];                       PrevDwell  = [PrevDwell FinalDwells{FileIndex}{FeedbackCycleIndex}.DwellTime(1:end-1)];                       CurrDwell  = [CurrDwell FinalDwells{FileIndex}{FeedbackCycleIndex}.DwellTime(2:end)];                   end               end            end        end    endend%% Now that we have the DwellTime and Filling arrays, sort into binsclose all;for Bin=1:length(FillingBinStart)    Results(Bin).Start  = FillingBinStart(Bin);    Results(Bin).Finish = FillingBinFinish(Bin);    Keepers = Filling<Results(Bin).Finish & Filling>Results(Bin).Start;    Results(Bin).Filling  = Filling(Keepers);     Results(Bin).PrevDwell = PrevDwell(Keepers);    Results(Bin).CurrDwell = CurrDwell(Keepers);    figure; hold on;    plot(Results(Bin).CurrDwell,Results(Bin).PrevDwell,'.k');    title(['Capsid Filling ' num2str(Results(Bin).Start) '-' num2str(Results(Bin).Finish) 'kb; N=' num2str(length(Results(Bin).Filling)) ]);    xlabel('Curr Dwell Duration (sec)');    ylabel('Prev Dwell Duration (bp)');    set(gca,'XScale','log');    set(gca,'YScale','log');        %axis([-15 15 -15 15]);    plot([3 3],get(gca,'YLim'),':b');    plot(get(gca,'XLim'),[3 3],':b');    axis square;    %plot([-15 15],[10 10],':b');    %plot([0 10],[10 0],':b');end