function PWD_PlotResults()%% Gheorghe Chistol, 28 Oct 2010%% Check is AnalysisPath is definedglobal analysisPath; %set the analysis path if neccessaryif isempty(analysisPath)    disp('analysisPath was not previously defined. Please define it and try again.');    return;end% Load the Index FilePWDFile = uigetfile([ [analysisPath '\PWD_Results\'] '*.mat'], 'Please select the PWD Results File','MultiSelect', 'off');PWDFileName = PWDFile;PWDFile = [analysisPath '\PWD_Results\' PWDFile];if ~exist(PWDFile,'file') %if no files were selected or file doesn't exist    disp('No PWD Results files were selected'); return;end%% Ask for the Parameters%Hist parameters refer to the histogram display at the endPrompt = {'PWD Window Size',...          'Packaged DNA Size (bp)',...          'Bin Start (bp)',...          'Bin Stop (bp)',...          'Bin Size (bp)'};     Title = 'Enter the Following Parameters';Lines = 1;Default = {'50','21000','15000','1000','20000'};Options.Resize='on'; Options.WindowStyle='normal'; Options.Interpreter='tex';Answer = inputdlg(Prompt, Title, Lines, Default, Options);WindowSize = str2num(Answer{1});LengthDNA  = str2num(Answer{2}); %BinStart   = str2num(Answer{3}); %BinWidth   = str2num(Answer{4}); %BinEnd     = str2num(Answer{5}); %load(PWDFile);ScreenSize=get(0,'ScreenSize'); %this is used to set the proper dimensions to the plotsw=ScreenSize(3); %screen width in pixelsh=ScreenSize(4); %screen height in pixelstemp = BinStart:BinWidth:BinEnd;%tempBin.Start  = temp(1:end-1);Bin.End    = temp(2:end);Bin.Center = (Bin.Start+Bin.End)/2;Data.Location = [];Data.Distance = {};Data.Number   = {};%-------------- First Compile the Data for p=1:length(PWD) %index p refers to entire phage traces    for fc=1:length(PWD(p).Location) %index fc refers to feedback traces        if ~isempty(PWD(p).Distance{fc}) %some may be empty because there was insufficient data            Data.Location(end+1) = PWD(p).Location(fc);            Data.Distance{end+1} = PWD(p).Distance{fc};            Data.Number{end+1}   = PWD(p).Number{fc};        end    endendData.Location = LengthDNA-Data.Location; %convert tether length to amt of DNA packaged alreadydisp('Finished Compiling Data');%--------------- Now assign data to various bins Bin.Startfor b=1:length(Bin.Start)    %b    IndSmaller = Data.Location<Bin.End(b);    IndLarger  = Data.Location>Bin.Start(b);    IndKeep    = logical(IndSmaller.*IndLarger); %index of the feedback traces that fall within the current bin        Bin.Location{b} = Data.Location(IndKeep);    Bin.Distance{b} = Data.Distance(IndKeep);    Bin.Number{b}   = Data.Number(IndKeep);    %Bin.Location{b}enddisp('Finished organizing data into bins');global Temp;Temp=Bin;%---------------- Now plot the Pairwise Distribution probabilities     for b=1:length(Bin.Start)    Distance=[];    Number  =[];    for i=1:length(Bin.Location{b})                if isempty(Distance)            Distance = Bin.Distance{b}{i};            Number   = Bin.Number{b}{i};        else            if length(Distance)<length(Bin.Distance{b}{i})                %we need to extend the vector Distance by n entries                n=length(Bin.Distance{b}{i})-length(Distance);                Distance = Bin.Distance{b}{i};                Number = [Number zeros(1,n)]; %pad the vector with zeros                Number = Number+Bin.Number{b}{i};            else                %no need to extend the vector Distance                n = length(Bin.Number{b}{i});                                Number(1:n) = Number(1:n)+Bin.Number{b}{i};            end        end    end        figure('Position',[9 9 w/2-15 h-80]);    plot(Distance,Number,'-b');    xlabel('Distance (bp)');    ylabel('Pairwise Distribution (arbitrary)');    set(gca,'XLim',[0 WindowSize]);    title(['PWD for window ' num2str(Bin.Start(b)/1000) '-' num2str(Bin.End(b)/1000) 'kb']);end