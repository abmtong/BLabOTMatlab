function Bin=CompilePWDResults()% This function compiles the PWD data from several phage traces. It loads% several MAT files with PWD data%% USE: Bin = CompilePWDResults()%% Gheorghe Chistol, 14 Sept 2010%% Ask for the ParametersPrompt = {'Length of Packaged DNA(bp)','DNA Length Bin Start (bp)',...          'DNA Length Bin End (bp)','DNA Length Bin Width (bp)'};Title = 'Enter the Following Parameters';Lines = 1;Default = {'21000','10000','21000','1000'};Options.Resize='on'; Options.WindowStyle='normal'; Options.Interpreter='tex';Answer = inputdlg(Prompt, Title, Lines, Default, Options);%Hist parameters refer to the histogram display at the endLengthDNA    = str2num(Answer{1}); %the length of packaged DNABinStart     = str2num(Answer{2});BinEnd       = str2num(Answer{3});BinWidth     = str2num(Answer{4});%% Declare Global Variables for Folder Namesglobal pwdPath; %declare the folder where MAT files are savedglobal analysisPath;if isempty(pwdPath) && isempty(analysisPath)   pwdPath = uigetdir(pwd , 'Select the Folder with processed PWD MAT files');elseif isempty(pwdPath) && ~isempty(analysisPath)   pwdPath = uigetdir(analysisPath , 'Select the Folder with processed PWD MAT files');elseif pwdPath==0   pwdPath = uigetdir(pwd, 'Select the Folder with processed PWD MAT files');else   pwdPath = uigetdir(pwdPath, 'Select the Folder with processed PWD MAT files');end%Select original files, many files can be selected at once[PWDFile] = uigetfile([ [pwdPath '\'] '*.mat'], 'MultiSelect', 'on');%process selected files one by oneif ~iscell(PWDFile)%if there's only one file    temp=PWDFile;    clear PWDFile;    PWDFile{1}=temp; %make it into a cellend%% Initialize the Data structure that organizes the Data in binstemp = BinStart:BinWidth:BinEnd; %make the bins for binning PWD data based on the length of DNA packagedBin.Start        = temp(1:end-1); %starting of each binBin.Finish          = temp(2:end);   %ending of each binfor i=1:length(Bin.Start);    Bin.Number{i}     = []; %to get the PWD, plot Number versus Distance    Bin.Distance{i}   = [];    Bin.PackagedDNA(i)  = 0; %the length of total DNA packaged that was used for this calculation    Bin.SampleNumber(i) = 0; %the number of phage traces that were used for this calculationend%% Put together all the datafor f=1:length(PWDFile) %f stands for File    clear PWD;    load([pwdPath '\' PWDFile{f}]);    disp(['Loaded PWD file ' PWDFile{f}]);    PWD.Location = LengthDNA-PWD.Location; %convert tether length to packaged DNA length%     PWD.Number{i}  %     PWD.Distance(i)%     PWD.Finish(i)  = Length(end);%     PWD.Segment(i) = abs(PWD.Start(i)-PWD.Finish(i)); %the length of the packaged DNA segment%     PWD.Location(i)= mean(Length); %where along DNA where this feedback cycle is located%     PWD.Time{i}    = Time;%     PWD.Contour{i} = Length;%     PWD.FilterFreq = F;%     PWD.Index(i)   = Index(i); %the index of the feedback cycle%     PWD.Tstart     = Tstart;%     PWD.Tstop      = Tstop;    L=length(Bin.Start);    for i=1:L        Ind = 1:length(PWD.Location); %the index of all feedback cycles in this file        %find all the feedback cycles that belong in this bin        %PWD.Location        temp=(PWD.Location > Bin.Finish(i))+(PWD.Location < Bin.Start(i));        RemoveIndex = temp==1;        Ind(RemoveIndex)   = []; %remove the points that are outside this bin                        if ~isempty(Ind)            %we need to add the PWDs from various feedback cycles            %the Distance vectors have the same spacing, and they all start            %at zero. They do have different endpoints though, so we have            %to deal with that            Bin.Distance{i}=[0];            for z=1:length(Ind)                if length(PWD.Distance{Ind(z)})>length(Bin.Distance{i})                    %set the Bin.Distance to the largest possible Distance Vector available                      Bin.Distance{i}=PWD.Distance{Ind(z)};                end            end            Bin.Number{i} = zeros(size(Bin.Distance{i})); %to get the PWD, plot Number versus Distance                        for z=1:length(Ind)                 %add the corresponding PWD Number data                TempN=length(PWD.Distance{Ind(z)});                                if TempN>1 && length(Bin.Distance{i})>=TempN%only add the data if there is any data at all                    Bin.Number{i}(1:TempN) = Bin.Number{i}(1:TempN) + PWD.Number{Ind(z)};                    %Bin.PackagedDNA(i)  = Bin.PackagedDNA(i)+sum(PWD.Segment(Ind));                else                    TempN                    length(Bin.Distance{i})                end            end        end    endend%% Plot the Resultsfor i=1:length(Bin.Start)    if ~isempty(Bin.Number{i}) %only plot it if there is any data to plot        figure;        plot(Bin.Distance{i},Bin.Number{i});        xlabel('Pairwise Distance (bp)');        ylabel('Occurence Number');        title([num2str(Bin.Start(i)) ' to ' num2str(Bin.Finish(i)) ]);    endend